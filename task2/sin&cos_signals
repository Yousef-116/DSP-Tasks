
import tkinter as tk
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

def generate_signal():
    # Retrieve user inputs
    signal_type = signal_type_var.get()
    amplitude = float(amplitude_entry.get())
    phase = float(phase_entry.get())
    analog_freq = float(analog_freq_entry.get())
    sampling_freq = float(sampling_freq_entry.get())
    signal_mode = signal_mode_var.get()

    # Ensure the sampling frequency adheres to the Nyquist theorem
    if sampling_freq <= 2 * analog_freq:
        print("Sampling frequency must be greater than twice the analog frequency.")
        return

    # Generate time values
    t = np.linspace(0, 2 * np.pi, int(sampling_freq / analog_freq) * 2)
    
    # Generate the signal based on user input
    if signal_type == 'Sine':
        signal = amplitude * np.sin(2 * np.pi * analog_freq * t + phase)
    else:  # Cosine
        signal = amplitude * np.cos(2 * np.pi * analog_freq * t + phase)

    # Clear the previous plot
    ax.clear()
    
    # Plot the signal based on the selected mode
    if signal_mode == 'Continuous':
        ax.plot(t, signal, label=signal_type)
    elif signal_mode == 'Discrete':
        ax.stem(t, signal, label=signal_type)
    elif signal_mode == 'C&D':
        ax.plot(t, signal, label=signal_type)
        ax.stem(t, signal, label=signal_type)

    # Set plot labels and legend
    ax.set_xlabel('Time')
    ax.set_ylabel('Amplitude')
    ax.legend()
    canvas.draw()

# Create the main window
root = tk.Tk()
root.title("Signal Viewer")

# Create widgets
signal_type_var = tk.StringVar(value='Sine')
signal_type_label = tk.Label(root, text="Signal Type:")
signal_type_menu = tk.OptionMenu(root, signal_type_var, 'Sine', 'Cosine')
amplitude_label = tk.Label(root, text="Amplitude:")
amplitude_entry = tk.Entry(root)
phase_label = tk.Label(root, text="Phase Shift (Î¸):")
phase_entry = tk.Entry(root)
analog_freq_label = tk.Label(root, text="Analog Frequency:")
analog_freq_entry = tk.Entry(root)
sampling_freq_label = tk.Label(root, text="Sampling Frequency:")
sampling_freq_entry = tk.Entry(root)
signal_mode_var = tk.StringVar(value='Continuous')
signal_mode_label = tk.Label(root, text="Signal Mode:")
signal_mode_menu = tk.OptionMenu(root, signal_mode_var, 'Continuous', 'Discrete', 'C&D')
generate_button = tk.Button(root, text="Generate Signal", command=generate_signal)

# Create plot
fig, ax = plt.subplots(figsize=(6, 3))
canvas = FigureCanvasTkAgg(fig, master=root)
canvas_widget = canvas.get_tk_widget()

# Place widgets on the grid
signal_type_label.grid(row=0, column=0)
signal_type_menu.grid(row=0, column=1)
amplitude_label.grid(row=1, column=0)
amplitude_entry.grid(row=1, column=1)
phase_label.grid(row=2, column=0)
phase_entry.grid(row=2, column=1)
analog_freq_label.grid(row=3, column=0)
analog_freq_entry.grid(row=3, column=1)
sampling_freq_label.grid(row=4, column=0)
sampling_freq_entry.grid(row=4, column=1)
signal_mode_label.grid(row=5, column=0)
signal_mode_menu.grid(row=5, column=1)
generate_button.grid(row=6, columnspan=2)
canvas_widget.grid(row=7, columnspan=2)

# Start the main loop
root.mainloop()
